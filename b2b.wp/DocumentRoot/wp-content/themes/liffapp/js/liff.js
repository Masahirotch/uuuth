var udata;



window.onload = async function() {

    const useNodeJS = false;   // ノードサーバーを使用していない場合は、この値をfalseに設定します
    const defaultLiffId = "1654367419-qZyQvRZW";   // ノードサーバーを使用していない場合は、デフォルトのLIFF値を変更します。

    // DO NOT CHANGE THIS
    let myLiffId = "1654367419-qZyQvRZW";

    // ノードが使用されている場合、環境変数をフェッチしてLIFFメソッドに渡します
    // それ以外の場合は、defaultLiffIdを渡します
    if (useNodeJS) {
        fetch('/send-id')
            .then(function(reqResponse) {
                return reqResponse.json();
            })
            .then(function(jsonResponse) {
                myLiffId = jsonResponse.id;
                initializeLiffOrDie(myLiffId);
            })
            .catch(function(error) {
                console.log(error);
            });
    } 
    // Node.jsじゃない場合はこっち
    else {

        myLiffId = defaultLiffId;
        initializeLiffOrDie(myLiffId);

    }//else

};


/**
* myLiffIdがnullかどうかを確認します。 nullの場合、LIFFを開始しません。
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiffOrDie(myLiffId) {
    if (!myLiffId) {
        console.log('');
    } else {
        initializeLiff(myLiffId);
    }




}


function initializeApp() {
    registerButtonHandlers();

    // check if the user is logged in/out, and disable inappropriate button
    if (liff.isLoggedIn()) {
        document.getElementById('liffLoginButton').disabled = true;
    } else {
        document.getElementById('liffLogoutButton').disabled = true;
    }
}



/**
* Initialize LIFF
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiff(myLiffId) {

    liff
    .init({
        liffId: myLiffId
    })
    .then(() => {

        initializeApp();
        displayLiffData();


        liff.getProfile().then(function(profile) {
        //liff.getProfilePlus().then(function(profile) {
            document.getElementById('userIdProfileField').textContent = profile.userId;
            document.getElementById('displayNameField').textContent = profile.displayName;

            const profilePictureDiv = document.getElementById('profilePictureDiv');
            if (profilePictureDiv.firstElementChild) {
                profilePictureDiv.removeChild(profilePictureDiv.firstElementChild);
            }
            const img = document.createElement('img');
            img.src = profile.pictureUrl;
            img.alt = 'Profile Picture';
            profilePictureDiv.appendChild(img);

            document.getElementById('statusMessageField').textContent = profile.statusMessage;

            udata = profile;

        })
        .then( function(){

            const getPostData = async () => {

                try {  

                    console.log('try')
                    console.dir(udata)

                    //const URL =  "https://us-central1-honkomagome-2cd38.cloudfunctions.net/SaveLineID";
                    const URL =  "https://us-central1-honkomagome-2cd38.cloudfunctions.net/MakeWorld";

                    //const myHeaders = new Headers({ 'Content-Type': 'text/plain' });

                    const myHeaders = new Headers();
                    myHeaders.append('Content-Type', 'text/plain');

                    const myInit = { 
                            method: 'POST',
                            headers: myHeaders,
                            mode: 'no-cors'
                        };

                    const RequestURL = URL + '?id=' + udata.userId;
                    console.log(RequestURL);

                    const myPost = new Request( RequestURL , myInit );

                    const response = await fetch(myPost)
                    .then((response) => console.dir(response))

                    .catch((error) => console.log(error));

                    //const postsData = await response.json();


                }
                catch (err){
                    console.log('catch.err')
                    console.dir(err);
                }

            }

            getPostData();


        })
        .catch(function(error) {
            window.alert('Error getting profile: ' + error);
        });

    })
    .catch((err) => {
        console.log(err);
    });

}



/**
* Display data generated by invoking LIFF methods
*/
function displayLiffData() {
    document.getElementById('browserLanguage').textContent = liff.getLanguage();
    document.getElementById('sdkVersion').textContent = liff.getVersion();
    document.getElementById('isInClient').textContent = liff.isInClient();
    document.getElementById('isLoggedIn').textContent = liff.isLoggedIn();
    document.getElementById('deviceOS').textContent = liff.getOS();
}



function registerButtonHandlers() {
    // login call, only when external browser is used
    document.getElementById('liffLoginButton').addEventListener('click', function() {
        if (!liff.isLoggedIn()) {
            // set `redirectUri` to redirect the user to a URL other than the front page of your LIFF app.
            liff.login();
        }
    });

    // logout call only when external browse
    document.getElementById('liffLogoutButton').addEventListener('click', function() {
        if (liff.isLoggedIn()) {
            liff.logout();
            window.location.reload();
        }
    });
}